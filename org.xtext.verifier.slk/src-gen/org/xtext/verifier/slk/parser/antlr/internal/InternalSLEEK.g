/*
* generated by Xtext
*/
grammar InternalSLEEK;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.verifier.slk.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.verifier.slk.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.verifier.slk.services.SLEEKGrammarAccess;

}

@parser::members {

 	private SLEEKGrammarAccess grammarAccess;
 	
    public InternalSLEEKParser(TokenStream input, SLEEKGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SLEEK";	
   	}
   	
   	@Override
   	protected SLEEKGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSLEEK
entryRuleSLEEK returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSLEEKRule()); }
	 iv_ruleSLEEK=ruleSLEEK 
	 { $current=$iv_ruleSLEEK.current; } 
	 EOF 
;

// Rule SLEEK
ruleSLEEK returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSLEEKAccess().getKeywordsArguParserRuleCall_0()); 
	    }
		lv_keywords_0_0=ruleArgu		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSLEEKRule());
	        }
       		add(
       			$current, 
       			"keywords",
        		lv_keywords_0_0, 
        		"Argu");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleArgu
entryRuleArgu returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArguRule()); }
	 iv_ruleArgu=ruleArgu 
	 { $current=$iv_ruleArgu.current; } 
	 EOF 
;

// Rule Argu
ruleArgu returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArguAccess().getPrecoditionParserRuleCall_0()); 
    }
    this_Precodition_0=rulePrecodition
    { 
        $current = $this_Precodition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArguAccess().getDataParserRuleCall_1()); 
    }
    this_Data_1=ruleData
    { 
        $current = $this_Data_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArguAccess().getLemmaParserRuleCall_2()); 
    }
    this_Lemma_2=ruleLemma
    { 
        $current = $this_Lemma_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArguAccess().getArgumentParserRuleCall_3()); 
    }
    this_Argument_3=ruleArgument
    { 
        $current = $this_Argument_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getArguAccess().getPrintParserRuleCall_4()); 
    }
    this_Print_4=rulePrint
    { 
        $current = $this_Print_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleData
entryRuleData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataRule()); }
	 iv_ruleData=ruleData 
	 { $current=$iv_ruleData.current; } 
	 EOF 
;

// Rule Data
ruleData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='data' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataAccess().getDataKeyword_0());
    }
(
(
		lv_name_1_0=RULE_SLK
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDataAccess().getNameSLKTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SLK");
	    }

)
))
;





// Entry rule entryRuleLemma
entryRuleLemma returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLemmaRule()); }
	 iv_ruleLemma=ruleLemma 
	 { $current=$iv_ruleLemma.current; } 
	 EOF 
;

// Rule Lemma
ruleLemma returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='lemma' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLemmaAccess().getLemmaKeyword_0());
    }
(
(
		lv_name_1_0=RULE_SLK
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLemmaAccess().getNameSLKTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLemmaRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SLK");
	    }

)
))
;





// Entry rule entryRulePrecodition
entryRulePrecodition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrecoditionRule()); }
	 iv_rulePrecodition=rulePrecodition 
	 { $current=$iv_rulePrecodition.current; } 
	 EOF 
;

// Rule Precodition
rulePrecodition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pred' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrecoditionAccess().getPredKeyword_0());
    }
(
(
		lv_name_1_0=RULE_SLK
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPrecoditionAccess().getNameSLKTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecoditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SLK");
	    }

)
))
;





// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	 iv_ruleArgument=ruleArgument 
	 { $current=$iv_ruleArgument.current; } 
	 EOF 
;

// Rule Argument
ruleArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='checkentail' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArgumentAccess().getCheckentailKeyword_0());
    }
(
(
		lv_name_1_0=RULE_SLK
		{
			newLeafNode(lv_name_1_0, grammarAccess.getArgumentAccess().getNameSLKTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SLK");
	    }

)
))
;





// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	 iv_rulePrint=rulePrint 
	 { $current=$iv_rulePrint.current; } 
	 EOF 
;

// Rule Print
rulePrint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='print' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrintAccess().getPrintKeyword_0());
    }
(
(
		lv_name_1_0=RULE_SLK
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPrintAccess().getNameSLKTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SLK");
	    }

)
))
;





RULE_SLK : RULE_WS+ ~('.')* '|-'? ~('.')* '.' RULE_WS*;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


